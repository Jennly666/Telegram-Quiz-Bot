from aiogram import types, Dispatcher, F
from aiogram.filters import Command
from database import (
    get_quiz_index,
    update_quiz_index,
    get_correct_answers,
    increment_correct_answers,
    save_quiz_result,
    get_all_results,
)
from quiz_data import quiz_data
from utils import generate_options_keyboard
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

async def start_command(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    button_quiz = KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    button_stats = KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [button_quiz],  # –ö–Ω–æ–ø–∫–∞ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            [button_stats],  # –ö–Ω–æ–ø–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
        ],
        resize_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —ç–∫—Ä–∞–Ω
    )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑-–±–æ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=keyboard
    )


async def start_quiz(message: types.Message):
    user_id = message.from_user.id
    await update_quiz_index(user_id, 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–æ–≤
    await increment_correct_answers(user_id, reset=True)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    await send_question(message, user_id)


async def send_question(message, user_id):
    question_index = await get_quiz_index(user_id)
    if question_index < len(quiz_data):
        question = quiz_data[question_index]
        keyboard = generate_options_keyboard(
            question["options"], question["options"][question["correct_option"]]
        )
        await message.answer(
            f"–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(quiz_data)}:\n{question['question']}",
            reply_markup=keyboard,
        )
    else:
        await send_final_results(message, user_id)


async def right_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    question_index = await get_quiz_index(user_id)
    question = quiz_data[question_index]

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    await increment_correct_answers(user_id)

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {question['options'][question['correct_option']]}\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await next_question(callback)


async def wrong_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    question_index = await get_quiz_index(user_id)
    question = quiz_data[question_index]

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    selected_option = callback.data.split(":")[1]
    correct_option = question["options"][question["correct_option"]]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_option}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await next_question(callback)


async def next_question(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    question_index = await get_quiz_index(user_id)
    await update_quiz_index(user_id, question_index + 1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_question(callback.message, user_id)


async def send_final_results(message: types.Message, user_id):
    correct_answers = await get_correct_answers(user_id)
    total_questions = len(quiz_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –±—ã–ª–æ –±–æ–ª—å—à–µ, —á–µ–º –≤–æ–ø—Ä–æ—Å–æ–≤
    correct_answers = min(correct_answers, total_questions)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await save_quiz_result(user_id, correct_answers)

    await message.answer(
        f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct_answers} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤."
    )


async def all_stats_handler(message: types.Message):
    results = await get_all_results()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not results:
        await message.answer("üìä –ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–≤–∏–∑. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
    else:
        leaderboard = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        for idx, (user_id, correct_answers) in enumerate(results, start=1):
            leaderboard += f"{idx}. –ò–≥—Ä–æ–∫ {user_id}: {correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        await message.answer(leaderboard)



def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))
    dp.message.register(start_quiz, F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
    dp.message.register(all_stats_handler, F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")
    dp.callback_query.register(right_answer, F.data == "right_answer")
    dp.callback_query.register(wrong_answer, F.data.startswith("wrong_answer"))
